# v0 = n
# Boot Loading
and $0 $0 $sp
addi $sp 100
# End Boot
#Save others work
sw $s0 $sp 0
sw $s1 $sp 1
sw $ra $sp 2
#Start our work 


 
and $s0 $0 $0        #Load Blank
addi $s0 2            #put value of 2 in (m)
or $s0 $0 $k0

addi $s1 19
sll $s1 $s1 -8
addi $s1 -80
 
Loop:
or $s1 $0 $a0        #n
or $s0 $0 $a1        #m
jal gcd              #call gcd
 
addi $v0 -1          #Subtract by one. Don’t care about #under(over)flow due to just want to see if the #value had been 1. Ends up as gcd(n,m) - 1 != 0
beq $v0 $0 $k0         #go past the jump
addi $s0 1           #Increment by 1
j Loop

 
sw $s0 $0 0
 
EndLoop:

#End Our work
#Cleanup 
lw $s0 $sp 0
lw $s1 $sp 1
lw $ra $sp 2
addi $sp 12
jr $ra 0




gcd:
 
and $t0 $0 $0        #Force Zero
addi $t0 2           #Load 2, Used as value of commands to skip
 
bne $v0 $0 $t0       #skip not equal (don’t return)
or $v0 $0 $a1        #Move b to return
jr $ra 0               #Return
 
 
addi $t0 4           #Currently has 2 so skip end lines minus 2, Used #as commands to skip for while loop  (total 6)
and $t2 $0 $0        #Set t2 to zero
addi $t2 2           #Amount to skip to for if inside the while
 
begin:
beq $a1 $0 $t0       #If b != 0 jump t0 forward
slt $a0 $a1 $t1      #Set t1 to 1 if a less then b  
bne $t1 $0 $t2       #Jump to else (forward 2)
sub $a0 $a0 $a1
j begin              #End of If, Start of Else
sub $a1 $a1 $a0
j begin              #Back up to look check
 
or $v0 $0 $a0        #Move a to return
jr $ra 0             #Return